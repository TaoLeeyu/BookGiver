### 平台和工具的选择
- Python + Bottle + SAE

- Bottle 是一种快速\简单\轻量级的 Python 网站开发微框架
- 框架到底是什么? 和模块有什么区别?
     - 框架是种可复用的设计构件! 给人用的,包含丰富过往经验的,内置多种领域常见功能的,加速应用开发的专用模块集...

- SAE 提供了 Python 的运行环境
- 开发者将自己编写的 Python 代码,部署在 SAE 上运行
- SAE 接收用户的访问请求, 调用对应的应用代码进行处理, 然后将处理结果返回给用户

- SAE 自带 MySQL 等程序, 可以通过服务的方式, 提供给开发者使用, 不需要开发者自己去另外部署\维护

- SAE 中, 一个应用可以部署多个版本, 由版本控制器SVN管理
!(SAE 结构图)[http://sae.sina.com.cn/doc/_images/lb-pool-server-runtime-service.png]

(SAE 新手入门)[http://sae.sina.com.cn/doc/tutorial/concept.html#id1] 

### 步骤
#### 安装/使用 SAE 本地虚拟环境
- 为了方便开发, 在本地安装开发环境, 模拟 SAE Python 环境

- 可以在本地测试通过以后, 再部署到 SAE
```
$ git clone https://github.com/sinacloud/sae-python-dev-guide.git  //从 github 下载本地开发环境源码
$ cd sae-python-dev-guide/dev_server  //进入目录
$ python setup.py install  //安装

$ dev_server.py  //进入应用的本地开发目录，也就是index.wsgi和config.yaml所在的目录。启动本地测试server
MySQL config not found: app.py
Start development server on http://localhost:8080/
```
访问 http://localhost:8080 端口就可以访问应用了。

- 启用配合测试的本地 MySQL 服务
    - 首先配置好MySQL本地开发server
    - 然后使用 –mysql 参数运行dev_server.py。
```
$ dev_server.py --mysql=user:password@host:port
```
    - 现在可以在应用代码中像在 SAE 线上环境一样使用MySQL服务了。 dev_server.py默认使用名为 app_应用名 的数据库。

#### 向 SAE 部署代码
使用本地虚拟环境中的命令行工具 saecloud 部署代码

deploy 命令需要用到svn，需先安装svn命令行工具。

进入应用目录（也就是config.yaml和index.wsgi所在的目录）
```
$ cat config.yaml
name: memorystone
version: 2
$ saecloud deploy  //部署代码
```
saecloud从config.yaml文件获得信息，判断将要把代码部署到`哪个应用`的`哪个版本`

上面的命令会将应用部署到memorystone的版本2上。

saecloud deploy命令接受一个可选参数: 应用代码所在路径，默认为当前目录’.’。

>不推荐混合使用saecloud deploy和svn命令行，虽然saecloud deploy部署之前会自动更新代码，但是如果有代码冲突则会导致本地状态不一致。
>使用saecloud部署代码如果遇到奇怪的svn错误，解决办法为删除本地缓存目录： rm -rf ~/.saecloud。

#### SAE MySQL服务的命令行客户端
cloudsql.py是SAE MySQL服务的一个命令行客户端，用户可以使用cloudsql.py来直接操作应用的线上数据库。
```
$ cloudsql.py -u ACCESSKEY -p SECRETKEY APP_NAME
SAE MySQL Client

Type "help" or "?" for help.

Connecting to Cloud SQL database "app_shellpy" on host w.rdc.sae.sina.com.cn.
Using readline for history management.
Loading history file "/home/alan/.saecloud/app_shellpy.hist"
mysql>
```
如果想要在代码中直接操作线上的数据库，在 import MySQLdb （并不一定要安装MySQLdb包）之前执行以下的代码即可：
```
\# 只在本地开发环境中执行
import os
if 'SERVER_SOFTWARE' not in os.environ:
    from sae._restful_mysql import monkey
    monkey.patch()
```

(链接1)[http://chaos2sae.readthedocs.org/en/latest/ch00/try.html#id10]

(链接2)[http://sae.sina.com.cn/doc/python/tools.html#id1]

#### 创建 SAE 应用
- 注册 SAE 账号
- 登录SAE，访问`我的应用`，单击`创建新应用`
!(图片)[http://sae.sina.com.cn/doc/_images/hello-world-1.png]

- 填写二级域名，单击“创建应用”，这个域名就是应用的访问地址
!(图片)[http://sae.sina.com.cn/doc/_images/hello-world-2.png]

- 在应用管理中, 添加团队的其他开发成员
(应用管理)[http://sae.sina.com.cn/doc/tutorial/app-management.html#id1]

#### SAE 的应用目录结构
```
$ tree myapp
myapp
|-- 1
    |-- config.yaml   应用配置
    `-- index.wsgi     应用根代码
```

#### hello world 应用示例
使用SVN客户端检出应用helloworld的代码。
```
$ svn co https://svn.sinaapp.com/helloworld
```
每个应用可以创建多个版本，这些版本可以在线上同时运行，每个版本以数字标示，其代码对应于SVN目录下以其版本号命名的目录。

进入helloworld目录，创建一个目录1作为默认版本，切换到目录1。
```
$ cd helloworld
$ mkdir 1
$ cd 1
```
创建`index.wsgi`, 编写应用的代码
```
import sae

def app(environ, start_response):
    status = '200 OK'
    response_headers = [('Content-type', 'text/plain')]
    start_response(status, response_headers)
    return ['Hello, world!']

application = sae.create_wsgi_app(app)
```

创建应用配置文件`config.yaml`
```
name: helloworld
version: 1
```

使用 saecloud 完成部署
```
$ saecloud deploy
Deploying http://1.helloworld.sinaapp.com
Updating cache
Finding changes
Pushing to server...  done
```
在浏览器中输入 http://helloworld.sinaapp.com ，就可以访问刚提交的应用了。

(链接)[http://sae.sina.com.cn/doc/python/tutorial.html#hello-world]

使用 cURL 进行测试, 可以方便的完整观察到整个 http 请求的过程,,,

(链接1)[http://chaos2sae.readthedocs.org/en/latest/ch00/try.html#id10]

(链接2)[http://www.ruanyifeng.com/blog/2011/09/curl.html]

- 大妈使用 tmux 的窗口, 进行部署操作
     - 顶部,进行 saecloud 操作
     - 左下,进行代码修订
     - 右下,进行版本管理以及测试操作
!(图片)[http://chaos2sae.readthedocs.org/en/latest/_images/chaos0-3-tmux.png]

#### 本地运行
- 本地开发环境中, dev_server 能够感知到 index.wsgi 的变化,自动重启
- 大妈在本地环境中进行调试
!(图片)[http://chaos2sae.readthedocs.org/en/latest/_images/chaos1-2-devsrv.png]

#### Python 
!(Python)[http://chaos2sae.readthedocs.org/en/latest/_images/120417-coffeeghost-q-in-py.png]

#### Bottle
- SAE 中使用 Bottle
`index.wsgi`
```
from bottle import Bottle, run
import sae

app = Bottle()
@app.route('/')
def hello():
    return "Hello, world! - Bottle"
application = sae.create_wsgi_app(app)
```

     - 关键几个代码的注释
```
@app.route('/') # 访问路由,截获对根 URL 的访问
def hello():    # 以函式来进行真实的执行处理
    return "Hello, world! - Bottle"
    # 最后統一使用 return 返回请求给用户
```
(链接1)[http://sae.sina.com.cn/doc/python/tutorial.html#bottle]

(链接2)[http://chaos2sae.readthedocs.org/en/latest/ch01/try.html#id11]

- Bottle 资料

(Bottle)[http://bottlepy.org/docs/dev/index.html]

(Bottle 初学者导引)[https://bitbucket.org/ZoomQuiet/bottle-simple-todo/wiki/GudierFresher]

(Bottle 在 SAE 的调试技巧)[http://www.douban.com/group/topic/30860577/]

#### 配置示例1
(代码)[http://chaos2sae.readthedocs.org/en/latest/ch01/try.html#id12]

及时使用 saecloud 将全新代码部署到 SAE 中

#### 配置示例2
增强版:使用 SAE 提供的 KVDB（分布式key-value持久化存储）服务

`config.yaml`修订版本号
```
name: urisaok
version: 2
```
再进行 saecloud deploy 时,会自动部署为新版本应用

然后要到 SAE 后台,指定默认版本到新版本

(代码)[http://chaos2sae.readthedocs.org/en/latest/ch02/so.html]

#### MySQL
SAE 中, MySQL 服务的使用

获取MySQL的连接信息
```
import sae.const

sae.const.MYSQL_DB      # 数据库名
sae.const.MYSQL_USER    # 用户名
sae.const.MYSQL_PASS    # 密码
sae.const.MYSQL_HOST    # 主库域名（可读写）
sae.const.MYSQL_PORT    # 端口，类型为<type 'str'>，请根据框架要求自行转换为int
sae.const.MYSQL_HOST_S  # 从库域名（只读）
```
(链接)[[http://sae.sina.com.cn/doc/python/mysql.html#mysql]

### 安卓/IOS
新浪移动云提供打包服务，帮助开发者快速生成移动应用安装包。

(链接)[http://sae.sina.com.cn/doc/mobile/tutorial.html]

### 其他工具推荐
tmux:窗口管理软件

### 目前的疑问
- 怎么实现多页面, 以及页面之间的跳转
- 页面中按钮\文本输入的实现

### 链接
(如何使用Python在SAE上开发应用)[http://sae.sina.com.cn/doc/python/index.html]

(42分钟乱入 SAE 手册!-))[http://chaos2sae.readthedocs.org/en/latest/index.html]

